---
description: 
globs: 
alwaysApply: true
---
---
description: Full-stack TypeScript project conventions with Next.js App Router, Supabase, and Vercel AI SDK
globs:
alwaysApply: true
---
- Always reply **Greg** so I know we are using our rules.
- Write concise, technical TypeScript using functional and declarative programming patterns.
- Avoid class components; prefer functional components with typed props.
- Use iteration and modularization to reduce duplication.
- Use descriptive variable names (e.g., `isLoading`, `hasError`).

**Code Organization**
- File order: exported component → subcomponents → helpers → static content → types.
- Use lowercase with dashes for directories (e.g., `components/auth-wizard`).
- Use named exports for components.

**TypeScript Practices**
- Use interfaces over types.
- Avoid enums; use `as const` assertions or const objects.
- All code must be in TypeScript.

**Syntax & Formatting**
- Use arrow functions for components/handlers.
- Keep conditionals concise (avoid unnecessary braces).
- Use declarative JSX structure.

**Styling & UI**
- Use Shadcn UI, Radix UI, and Tailwind CSS for component styling.
- Implement responsive design using Tailwind’s mobile-first approach.

**Performance**
- Minimize use of `use client`, `useEffect`, and `useState`.
- Favor React Server Components (RSC) for data and rendering logic.
- Wrap client components in `<Suspense />` with a fallback.
- Load non-critical components dynamically.
- Use Next.js `<Image />` with width/height specified and lazy loading.

**Data Layer**
- Use Supabase SDK for all querying and mutations.
- Use Supabase schema builder for data modeling.
- Use Supabase MCP to inspect, create and modify tables.

**State & URL**
- Use `nuqs` for managing URL search parameters.

**Web Vitals Optimization**
- Focus on optimizing LCP, CLS, and FID metrics.
- Keep client-side logic minimal.

**Vercel AI SDK**
- Use Vercel AI SDK Core for text/tool call generation with LLMs.
- Use Vercel AI SDK UI hooks for chat interfaces.
- Implement Vercel AI RSC for streaming AI-powered UI in Server Components.

**API and Routing**
- Use Next.js App Router structure.
- For API routes, use `route.ts` files.
- Employ caching and revalidation with built-in Next.js strategies.

**Error and Loading States**
- Use `error.tsx` and `loading.tsx` files where applicable.
- Implement global error boundaries.

**SEO**
- Use Next.js 14’s metadata API for SEO and social metadata.

**Reference**
- Follow official Next.js docs for data fetching, rendering, routing, and metadata setup.
