name: üßπ Daily System Maintenance

on:
  schedule:
    # Run daily at 3 AM EST (8 AM UTC) - quiet time for maintenance
    - cron: '0 8 * * *'
    
    # Run weekly deep cleanup on Mondays at 2 AM EST (7 AM UTC)
    - cron: '0 7 * * 1'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      maintenance_type:
        description: 'Type of maintenance to run'
        required: true
        default: 'daily'
        type: choice
        options:
          - daily
          - weekly
          - retention_only
          - health_check_only
      
      dry_run:
        description: 'Run in dry-run mode (no actual deletions)'
        required: false
        default: 'true'
        type: boolean

env:
  APP_URL: ${{ secrets.APP_URL || 'https://your-app-domain.vercel.app' }}

jobs:
  system-health-check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: üîç System Health Assessment
        id: health_check
        run: |
          echo "üîç Running comprehensive system health check..."
          
          # Check system health
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X GET "${{ env.APP_URL }}/api/snapshots?action=system_health" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          echo "üìä Health Check Response Code: $http_code"
          
          if [ $http_code -eq 200 ]; then
            # Parse health data - adapt to current API response structure
            total_snapshots=$(echo $content | jq -r '.summary.total_snapshots // 0')
            system_status=$(echo $content | jq -r '.summary.live_stats_availability // 0 | if . > 0 then "active" else "inactive" end')
            cache_size=$(echo $content | jq -r '.pagination.returned // 0')
            system_version="1.0-deployed"
            
            echo "‚úÖ SYSTEM HEALTH REPORT:"
            echo "   üì∏ Total Snapshots: $total_snapshots"
            echo "   üü¢ System Status: $system_status"
            echo "   üíæ Cache Size: $cache_size items"
            echo "   üìã Version: $system_version"
            
            # Set outputs for other jobs
            echo "SYSTEM_HEALTHY=true" >> $GITHUB_ENV
            echo "TOTAL_SNAPSHOTS=$total_snapshots" >> $GITHUB_ENV
            echo "SYSTEM_STATUS=$system_status" >> $GITHUB_ENV
            
            # Health thresholds (adjusted for golf analytics - higher limits)
            if [ $total_snapshots -gt 500000 ]; then
              echo "‚ö†Ô∏è WARNING: Very high snapshot count ($total_snapshots) - consider cleanup"
              echo "HIGH_SNAPSHOT_COUNT=true" >> $GITHUB_ENV
            elif [ $total_snapshots -gt 100000 ]; then
              echo "üìä INFO: Large dataset ($total_snapshots snapshots) - excellent for golf analytics!"
            fi
            
            if [ "$system_status" != "active" ] && [ "$system_status" != "inactive" ]; then
              echo "‚ùå WARNING: Unexpected system status: $system_status"
              echo "SYSTEM_STATUS_ISSUE=true" >> $GITHUB_ENV
            fi
          else
            echo "‚ùå System health check failed (HTTP $http_code)"
            echo "SYSTEM_HEALTHY=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: üèåÔ∏è Live Tournament Stats Cleanup
        run: |
          echo "üèåÔ∏è Cleaning up stale live tournament stats..."
          
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X POST "${{ env.APP_URL }}/api/live-stats/cleanup" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0" \
            -d '{"action": "cleanup_stale", "days_threshold": 2}')
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          if [ $http_code -eq 200 ]; then
            cleaned_count=$(echo $content | jq -r '.cleaned_records // 0')
            echo "‚úÖ LIVE STATS CLEANUP:"
            echo "   üóëÔ∏è Removed: $cleaned_count stale records"
            echo "LIVE_STATS_CLEANED=$cleaned_count" >> $GITHUB_ENV
          else
            echo "‚ùå Live stats cleanup failed (HTTP $http_code)"
            echo "$content"
          fi

      - name: üìä Retention Policy Status
        run: |
          echo "üìä Checking retention policy status..."
          
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X GET "${{ env.APP_URL }}/api/snapshots?action=retention_status" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          if [ $http_code -eq 200 ]; then
            snapshot_count=$(echo $content | jq -r '.data.retention_policy.current_snapshot_count // 0')
            oldest_date=$(echo $content | jq -r '.data.retention_policy.oldest_snapshot_date // "null"')
            storage_mb=$(echo $content | jq -r '.data.retention_policy.estimated_storage_mb // 0')
            
            echo "‚úÖ RETENTION STATUS:"
            echo "   üì∏ Current Snapshots: $snapshot_count"
            echo "   üìÖ Oldest Snapshot: $oldest_date"
            echo "   üíæ Estimated Storage: ${storage_mb}MB"
            
            echo "STORAGE_MB=$storage_mb" >> $GITHUB_ENV
            echo "OLDEST_SNAPSHOT=$oldest_date" >> $GITHUB_ENV
          else
            echo "‚ùå Failed to get retention status (HTTP $http_code)"
          fi

  data-retention:
    needs: system-health-check
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: ${{ github.event.inputs.maintenance_type != 'health_check_only' }}
    
    steps:
      - name: üßπ Data Retention - Dry Run Analysis
        if: ${{ github.event.inputs.dry_run == 'true' || github.event.inputs.dry_run == '' }}
        run: |
          echo "üßπ Running retention policy dry run..."
          
          # Determine policy based on maintenance type and current system state
          if [ "${{ github.event.inputs.maintenance_type }}" = "weekly" ] || [ "${{ env.HIGH_SNAPSHOT_COUNT }}" = "true" ]; then
            POLICY="production"
            echo "üè≠ Using PRODUCTION policy (7-year retention)"
          else
            POLICY="venue_analytics"
            echo "üèåÔ∏è Using VENUE ANALYTICS policy (15-year retention, optimal for venue-specific insights)"
          fi
          
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X POST "${{ env.APP_URL }}/api/snapshots" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0" \
            -d "{\"action\": \"apply_retention\", \"policy\": \"$POLICY\", \"dry_run\": true}")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          if [ $http_code -eq 200 ]; then
            snapshots_would_delete=$(echo $content | jq -r '.data.snapshots_would_delete // 0')
            storage_would_free=$(echo $content | jq -r '.data.storage_would_free_mb // 0')
            runtime_minutes=$(echo $content | jq -r '.data.estimated_runtime_minutes // 0')
            
            echo "‚úÖ DRY RUN RESULTS ($POLICY policy):"
            echo "   üóëÔ∏è Would Delete: $snapshots_would_delete snapshots"
            echo "   üíæ Would Free: ${storage_would_free}MB storage"
            echo "   ‚è±Ô∏è Estimated Runtime: ${runtime_minutes} minutes"
            
            echo "POLICY_TO_APPLY=$POLICY" >> $GITHUB_ENV
            echo "WOULD_DELETE=$snapshots_would_delete" >> $GITHUB_ENV
            echo "WOULD_FREE_MB=$storage_would_free" >> $GITHUB_ENV
          else
            echo "‚ùå Dry run failed (HTTP $http_code)"
            echo "$content"
          fi

      - name: üóëÔ∏è Apply Data Retention Policy
        if: ${{ github.event.inputs.dry_run == 'false' }}
        run: |
          echo "üóëÔ∏è Applying retention policy: ${{ env.POLICY_TO_APPLY }}"
          echo "‚ö†Ô∏è This will delete ${{ env.WOULD_DELETE }} snapshots and free ${{ env.WOULD_FREE_MB }}MB"
          
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X POST "${{ env.APP_URL }}/api/snapshots" \
            -H "Content-Type: application/json" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0" \
            -d "{\"action\": \"apply_retention\", \"policy\": \"${{ env.POLICY_TO_APPLY }}\", \"dry_run\": false}")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          if [ $http_code -eq 200 ]; then
            snapshots_deleted=$(echo $content | jq -r '.data.snapshots_deleted // 0')
            storage_freed=$(echo $content | jq -r '.data.storage_freed_mb // 0')
            execution_time=$(echo $content | jq -r '.data.execution_time_ms // 0')
            
            echo "‚úÖ RETENTION APPLIED SUCCESSFULLY:"
            echo "   üóëÔ∏è Deleted: $snapshots_deleted snapshots"
            echo "   üíæ Freed: ${storage_freed}MB storage"
            echo "   ‚è±Ô∏è Execution Time: ${execution_time}ms"
          else
            echo "‚ùå Retention policy failed (HTTP $http_code)"
            echo "$content"
            exit 1
          fi

  post-maintenance-health:
    needs: [system-health-check, data-retention]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: üîç Post-Maintenance Health Check
        run: |
          echo "üîç Running post-maintenance system verification..."
          
          response=$(curl -s -L -w "HTTPSTATUS:%{http_code}" \
            -X GET "${{ env.APP_URL }}/api/snapshots?action=system_health" \
            -H "User-Agent: GitHub-Actions-Maintenance/1.0")
          
          http_code=$(echo $response | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          content=$(echo $response | sed -e 's/HTTPSTATUS:.*//')
          
          if [ $http_code -eq 200 ]; then
            total_snapshots=$(echo $content | jq -r '.summary.total_snapshots // 0')
            system_status=$(echo $content | jq -r '.summary.live_stats_availability // 0 | if . > 0 then "active" else "inactive" end')
            
            echo "‚úÖ POST-MAINTENANCE STATUS:"
            echo "   üì∏ Remaining Snapshots: $total_snapshots"
            echo "   üü¢ System Status: $system_status"
            
            # Compare with pre-maintenance state
            if [ "${{ env.TOTAL_SNAPSHOTS }}" != "" ]; then
              pre_count=${{ env.TOTAL_SNAPSHOTS }}
              deleted_count=$((pre_count - total_snapshots))
              echo "   üìä Change: -$deleted_count snapshots"
            fi
          else
            echo "‚ùå Post-maintenance health check failed"
          fi

      - name: üìã Maintenance Summary
        if: always()
        run: |
          echo "üßπ DAILY MAINTENANCE SUMMARY"
          echo "============================"
          echo "üïí Maintenance Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "üîß Maintenance Type: ${{ github.event.inputs.maintenance_type || 'daily' }}"
          echo "üîç Dry Run Mode: ${{ github.event.inputs.dry_run || 'true' }}"
          echo ""
          echo "üìä SYSTEM STATUS:"
          echo "   üü¢ System Health: ${{ env.SYSTEM_HEALTHY || 'unknown' }}"
          echo "   üì∏ Total Snapshots: ${{ env.TOTAL_SNAPSHOTS || 'unknown' }}"
          echo "   üíæ Storage Usage: ${{ env.STORAGE_MB || 'unknown' }}MB"
          echo ""
          
          if [ "${{ github.event.inputs.dry_run }}" != "false" ]; then
            echo "üí° RECOMMENDATIONS:"
            echo "   üóëÔ∏è Would delete: ${{ env.WOULD_DELETE || '0' }} snapshots"
            echo "   üíæ Would free: ${{ env.WOULD_FREE_MB || '0' }}MB storage"
            echo "   ‚ñ∂Ô∏è To apply changes, run with dry_run=false"
          else
            echo "‚úÖ MAINTENANCE COMPLETED"
            echo "   üóëÔ∏è Snapshots deleted: Successfully applied retention policy"
            echo "   üíæ Storage optimized: System cleaned up"
          fi
          
          if [ "${{ env.HIGH_SNAPSHOT_COUNT }}" = "true" ]; then
            echo ""
            echo "‚ö†Ô∏è ALERT: High snapshot count detected"
            echo "   Consider running weekly maintenance more frequently"
          fi 