# Task ID: 1
# Title: Set up React Query Infrastructure
# Status: done
# Dependencies: None
# Priority: high
# Description: Configure React Query as the primary data fetching and state management solution to replace context-based state management.
# Details:
1. Install React Query dependencies: `npm install @tanstack/react-query @tanstack/react-query-devtools`
2. Create a QueryClientProvider wrapper in _app.tsx or layout.tsx
3. Configure default options for queries (staleTime, cacheTime, refetchOnWindowFocus, etc.)
4. Set up React Query DevTools for development environment
5. Create a custom hook factory for standardized query creation
6. Implement proper query key factory for consistent key management
7. Add global error handling for queries

Example setup:
```typescript
// src/lib/react-query/index.ts
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      cacheTime: 10 * 60 * 1000, // 10 minutes
      retry: 1,
      refetchOnWindowFocus: false,
    },
  },
});

export function ReactQueryProvider({ children }) {
  return (
    <QueryClientProvider client={queryClient}>
      {children}
      <ReactQueryDevtools initialIsOpen={false} />
    </QueryClientProvider>
  );
}
```

# Test Strategy:
1. Create unit tests to verify React Query is properly configured
2. Test that the QueryClient is initialized with the correct default options
3. Verify that the DevTools are only included in development builds
4. Test the custom hook factory with mock API calls
5. Ensure proper error handling by simulating failed requests

# Subtasks:
## 1. Install React Query and dependencies [done]
### Dependencies: None
### Description: Install React Query and related packages in the project
### Details:
Run npm/yarn command to install @tanstack/react-query and @tanstack/react-query-devtools. Update package.json and ensure compatibility with existing React version. Verify installation by checking node_modules.
<info added on 2025-05-10T12:51:44.071Z>
Run npm/yarn command to install @tanstack/react-query and @tanstack/react-query-devtools. Update package.json and ensure compatibility with existing React version. Verify installation by checking node_modules.

Implementation Plan:
1. Check React Version Compatibility:
   - Confirm the current React version in package.json to ensure @tanstack/react-query is compatible.
   - Reference: https://tanstack.com/query/v4/docs/react/installation#supported-react-versions

2. Install Packages:
   - Run: `npm install @tanstack/react-query @tanstack/react-query-devtools`
   - This will add the required dependencies to package.json and node_modules.

3. Verify Installation:
   - Check that both packages appear in package.json dependencies.
   - Confirm node_modules contains @tanstack/react-query and @tanstack/react-query-devtools.

4. Check for Peer Dependency Warnings:
   - Review npm output for any peer dependency or compatibility warnings.

5. Commit Changes:
   - Stage and commit the updated package.json and package-lock.json (or yarn.lock) files.

Potential Challenges:
- If the React version is too old, upgrade React before proceeding.
- If there are conflicts with other state management libraries, note them for later refactoring.

Next Steps:
- Once dependencies are installed and verified, proceed to subtask 1.2: Configure QueryClient with global defaults.
</info added on 2025-05-10T12:51:44.071Z>

## 2. Configure QueryClient with global defaults [done]
### Dependencies: 1.1
### Description: Set up the QueryClient with appropriate configuration options
### Details:
Create a queryClient.js file to instantiate and export QueryClient. Configure global defaults for staleTime, cacheTime, retry logic, and error handling. Set up React Query dev tools for development environment.
<info added on 2025-05-10T12:54:55.318Z>
Create a queryClient.js file to instantiate and export QueryClient. Configure global defaults for staleTime, cacheTime, retry logic, and error handling. Set up React Query dev tools for development environment.

Create a React Query Provider Module in src/lib/react-query/provider.tsx that instantiates a QueryClient with the following global defaults:
- staleTime: 5 minutes
- cacheTime: 10 minutes
- retry: 1
- refetchOnWindowFocus: false

The implementation should include:
1. A properly configured QueryClient instance with all default options
2. A ReactQueryProvider component that wraps children with QueryClientProvider
3. Conditional rendering of ReactQueryDevtools only in development environment
4. Global error handling configuration for queries
5. Clear exports to make the provider available for the app's root layout

Example implementation structure:
```typescript
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000,
      cacheTime: 10 * 60 * 1000,
      retry: 1,
      refetchOnWindowFocus: false,
      onError: (error) => {
        // Global error handling logic
      },
    },
  },
});

export const ReactQueryProvider = ({ children }: { children: React.ReactNode }) => (
  <QueryClientProvider client={queryClient}>
    {children}
    {process.env.NODE_ENV === 'development' && <ReactQueryDevtools initialIsOpen={false} />}
  </QueryClientProvider>
);
```

After implementation, document usage instructions for integrating the provider into the Next.js root layout. Be mindful of potential challenges like ensuring the provider is only included once at the app root and avoiding duplicate QueryClient instances.
</info added on 2025-05-10T12:54:55.318Z>

## 3. Implement query key factory [done]
### Dependencies: 1.2
### Description: Create a structured system for managing query keys
### Details:
Develop a query key factory that ensures consistent key structure across the application. Implement namespacing for different resource types. Create helper functions for key generation and manipulation. Document the key structure for team reference.

## 4. Create custom hooks for data fetching [done]
### Dependencies: 1.2, 1.3
### Description: Develop reusable custom hooks that leverage React Query
### Details:
Create useQuery wrapper hooks for common data fetching patterns. Implement useMutation hooks for data modifications. Add error handling, loading states, and optimistic updates. Ensure hooks follow consistent patterns and naming conventions.

## 5. Integrate React Query with existing components [done]
### Dependencies: 1.4
### Description: Refactor components to use React Query for data fetching
### Details:
Identify components currently using direct API calls or other state management. Replace existing data fetching logic with React Query hooks. Update component logic to handle loading/error states from React Query. Test refactored components to ensure functionality is preserved.
<info added on 2025-05-12T23:31:47.222Z>
Identify components currently using direct API calls or other state management. Replace existing data fetching logic with React Query hooks. Update component logic to handle loading/error states from React Query. Test refactored components to ensure functionality is preserved.

Implementation Plan:

1. Identify Target Components:
- Search the codebase for components using direct API calls (fetch, axios, Supabase client)
- List all components and their data fetching requirements
- Cross-reference with custom React Query hooks and query key factory (lib/query-keys.ts)

2. Refactor Data Fetching Logic:
- Remove direct API calls and legacy data-fetching logic
- Replace with appropriate custom React Query hooks
- Ensure queryKey is generated via the queryKeys factory
- Update props and state to consume data, isLoading, and error states

3. Update Loading and Error Handling:
- Implement React Query's loading and error states for UI feedback
- Remove redundant local loading/error state logic
- Use declarative conditional rendering for loading and error UI

4. Test Refactored Components:
- Manually test each refactored component
- Verify correct data loading, error handling, and UI behavior
- Ensure feature parity with previous implementation
- Add/update unit tests as needed

5. Code Quality and Conventions:
- Follow queryKeys factory pattern for all queryKey usage
- Use functional components and typed props
- Remove unused imports and legacy code
- Adhere to project conventions for file structure and exports

6. Commit and Document:
- Stage and commit changes with detailed message referencing Task 1.5
- Document any migration challenges or plan deviations
</info added on 2025-05-12T23:31:47.222Z>

