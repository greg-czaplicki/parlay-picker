# Task ID: 2
# Title: Create API Route Utilities and Standardization
# Status: done
# Dependencies: None
# Priority: high
# Description: Develop shared utilities for API routes to extract common logic, implement consistent error handling, and standardize response formats.
# Details:
1. Create a central API utilities directory structure
2. Implement typed response interfaces for all API endpoints
3. Develop error handling middleware with proper HTTP status codes
4. Extract common logic from matchup routes (2ball/3ball) into reusable functions
5. Create validation utilities for request data
6. Implement logging middleware for debugging

Example implementation:
```typescript
// src/lib/api/middleware.ts
import { NextApiRequest, NextApiResponse } from 'next';
import { ZodSchema } from 'zod';

export interface ApiResponse<T> {
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

export function withErrorHandling(
  handler: (req: NextApiRequest, res: NextApiResponse) => Promise<void>
) {
  return async (req: NextApiRequest, res: NextApiResponse) => {
    try {
      await handler(req, res);
    } catch (error) {
      console.error(error);
      const statusCode = error.statusCode || 500;
      res.status(statusCode).json({
        error: {
          code: error.code || 'INTERNAL_SERVER_ERROR',
          message: error.message || 'An unexpected error occurred',
          details: process.env.NODE_ENV === 'development' ? error : undefined,
        },
      });
    }
  };
}

export function withValidation<T>(schema: ZodSchema<T>) {
  return (handler: (req: NextApiRequest, res: NextApiResponse, validData: T) => Promise<void>) => {
    return async (req: NextApiRequest, res: NextApiResponse) => {
      try {
        const validData = schema.parse(req.body);
        await handler(req, res, validData);
      } catch (error) {
        res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: 'Invalid request data',
            details: error.errors,
          },
        });
      }
    };
  };
}
```

# Test Strategy:
1. Write unit tests for each middleware function
2. Test error handling with various error types and status codes
3. Verify validation middleware correctly validates request data
4. Test that API responses follow the standardized format
5. Create integration tests for complete API routes using the middleware
6. Verify logging captures appropriate information

# Subtasks:
## 1. Implement error handling middleware [done]
### Dependencies: None
### Description: Create a centralized error handling middleware that catches and processes all API errors consistently
### Details:
Develop middleware that catches exceptions, standardizes error responses, handles different error types (validation, authentication, authorization, server errors), includes appropriate HTTP status codes, and provides meaningful error messages without exposing sensitive information

## 2. Create request validation utilities [done]
### Dependencies: None
### Description: Develop utilities for validating incoming API requests
### Details:
Implement validation utilities using a schema validation library (like Joi, Zod, or Yup), create reusable validation schemas for common data structures, and ensure validation errors are properly formatted and returned to clients

## 3. Standardize API response formatting [done]
### Dependencies: 2.1
### Description: Create utilities to ensure consistent response structure across all API endpoints
### Details:
Design a standard response format with success/error indicators, status codes, data payload, and metadata. Implement utility functions to generate these responses consistently across all routes

## 4. Implement logging system for API routes [done]
### Dependencies: None
### Description: Create a comprehensive logging system for API requests and responses
### Details:
Implement request logging middleware that captures request details, response status, execution time, and other relevant metrics. Set up different log levels (info, warn, error) and ensure sensitive data is properly masked in logs
<info added on 2025-05-11T23:36:46.368Z>
Implement request logging middleware that captures request details, response status, execution time, and other relevant metrics. Set up different log levels (info, warn, error) and ensure sensitive data is properly masked in logs.

Implementation Plan:
1. Library Selection:
   - Use next-logger (wrapper) with Pino for logging in Next.js API routes
   - These provide high-performance logging with good Next.js integration

2. Installation:
   - Install required dependencies using pnpm: `pnpm add next-logger pino`

3. Configuration Setup:
   - Configure next-logger to use Pino as the underlying logger
   - Set up redaction patterns for sensitive data (req.headers.authorization, req.body.password, etc.)
   - Configure appropriate log levels and formats

4. Middleware Implementation:
   - Create a withLogger middleware wrapper for API route handlers
   - Ensure the middleware captures: request method, path, query parameters, request body
   - Track execution time for performance monitoring
   - Log response status codes and error details when applicable

5. Logging Standards:
   - INFO level: Standard requests, successful responses, general application flow
   - WARN level: Potential issues, deprecated endpoints, slow responses
   - ERROR level: Failed requests, exceptions, server errors
   - Ensure consistent log format across all API routes

6. TypeScript Integration:
   - Create proper type definitions for the logger
   - Ensure type safety across all logging implementations

7. Documentation:
   - Add usage examples for implementing the logger in new API routes
   - Document best practices for what should be logged at each level

8. Optional Extensions:
   - Extend logging to global middleware if needed
   - Implement logging in error boundaries for frontend errors
   - Consider log aggregation solutions for production
</info added on 2025-05-11T23:36:46.368Z>

## 5. Extract common API logic into utilities [done]
### Dependencies: 2.2, 2.3
### Description: Identify and extract repeated logic across API routes into reusable utility functions
### Details:
Analyze existing routes to identify common patterns, create utility functions for pagination, filtering, sorting, data transformation, and other repeated operations to reduce code duplication and ensure consistency

## 6. Integrate utilities with existing API routes [done]
### Dependencies: 2.1, 2.2, 2.3, 2.4, 2.5
### Description: Refactor existing API routes to use the new utility functions and middleware
### Details:
Update all existing API routes to use the new error handling, validation, response formatting, and logging utilities. Ensure backward compatibility and test thoroughly to prevent regressions

