# Task ID: 10
# Title: Reorganize Component Hierarchy
# Status: pending
# Dependencies: 9
# Priority: medium
# Description: Restructure the component hierarchy using atomic design principles to improve maintainability and reusability.
# Details:
1. Group components by feature rather than type
2. Create a proper component library with clear categorization
3. Use atomic design principles (atoms, molecules, organisms)
4. Extract reusable logic into custom hooks
5. Implement utility functions for common operations
6. Separate business logic from UI components

Example implementation:
```
src/
  components/
    ui/                 # Atomic design components
      atoms/
        Button.tsx
        Input.tsx
        Select.tsx
      molecules/
        FormField.tsx
        Card.tsx
        Dialog.tsx
      organisms/
        DataTable.tsx
        Navbar.tsx
        Footer.tsx
    golf/               # Domain-specific components
      MatchupCard.tsx
      ParlayBuilder/
        index.tsx
        MatchupSelector.tsx
        ParlayPreview.tsx
      Tournament/
        TournamentHeader.tsx
        TournamentSchedule.tsx
    layout/             # Layout components
      AppShell.tsx
      Sidebar.tsx
      Header.tsx
  hooks/               # Custom hooks
    useMatchups.ts
    useParlay.ts
    useTournaments.ts
  lib/                 # Utilities and shared logic
    api/               # API utilities
    utils/             # General utilities
    types/             # TypeScript types
```

```typescript
// src/hooks/useMatchupSelection.ts
import { useState, useCallback } from 'react';

export function useMatchupSelection() {
  const [selectedMatchups, setSelectedMatchups] = useState<number[]>([]);
  
  const addMatchup = useCallback((id: number) => {
    setSelectedMatchups(prev => {
      // Check for duplicates
      if (prev.includes(id)) return prev;
      return [...prev, id];
    });
  }, []);
  
  const removeMatchup = useCallback((id: number) => {
    setSelectedMatchups(prev => prev.filter(matchupId => matchupId !== id));
  }, []);
  
  const clearMatchups = useCallback(() => {
    setSelectedMatchups([]);
  }, []);
  
  const isSelected = useCallback((id: number) => {
    return selectedMatchups.includes(id);
  }, [selectedMatchups]);
  
  return {
    selectedMatchups,
    addMatchup,
    removeMatchup,
    clearMatchups,
    isSelected,
  };
}

// src/components/golf/ParlayBuilder/index.tsx
import { useMatchupSelection } from '@/hooks/useMatchupSelection';
import MatchupSelector from './MatchupSelector';
import ParlayPreview from './ParlayPreview';
import StrategyFilters from './StrategyFilters';

export default function ParlayBuilder() {
  const matchupSelection = useMatchupSelection();
  const [activeFilter, setActiveFilter] = useState('balanced');
  
  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <div className="md:col-span-2">
        <StrategyFilters 
          activeFilter={activeFilter} 
          setActiveFilter={setActiveFilter} 
        />
        <MatchupSelector 
          filter={activeFilter}
          onSelectMatchup={matchupSelection.addMatchup}
          isMatchupSelected={matchupSelection.isSelected}
        />
      </div>
      <div>
        <ParlayPreview 
          selectedMatchups={matchupSelection.selectedMatchups}
          onRemoveMatchup={matchupSelection.removeMatchup}
          onClearMatchups={matchupSelection.clearMatchups}
        />
      </div>
    </div>
  );
}
```

# Test Strategy:
1. Create unit tests for custom hooks
2. Test component composition with different props
3. Verify that business logic is properly separated from UI
4. Test reusability of components across different contexts
5. Create integration tests for feature components
6. Verify that component hierarchy follows atomic design principles
7. Test utility functions with various inputs
8. Create documentation for component usage

# Subtasks:
## 1. Component Inventory and Analysis [pending]
### Dependencies: None
### Description: Create a comprehensive inventory of all existing components and analyze their relationships, dependencies, and functionality.
### Details:
Document all components with their current location, purpose, props, state management, and relationships to other components. Identify components that are tightly coupled, have mixed responsibilities, or contain duplicated logic. Create a visual map of the current component hierarchy to better understand the existing structure.

## 2. Atomic Design Structure Definition [pending]
### Dependencies: 10.1
### Description: Define the atomic design structure (atoms, molecules, organisms, templates, pages) for the application and create folder structure guidelines.
### Details:
Based on the component analysis, establish clear criteria for categorizing components into atomic design levels. Create documentation for the new structure with examples of each category. Set up the new folder structure in a development branch and define naming conventions and file organization rules.

## 3. Feature-Based Organization Implementation [pending]
### Dependencies: 10.1, 10.2
### Description: Implement a feature-based organization structure for business logic and complex components that don't fit neatly into the atomic design system.
### Details:
Identify distinct features in the application and create a feature-based folder structure alongside the atomic components. Define boundaries between features and establish patterns for feature-specific components, hooks, and utilities. Document how atomic and feature-based structures will interact.

## 4. Custom Hook Extraction [pending]
### Dependencies: 10.1
### Description: Extract reusable logic from components into custom hooks to improve code reuse and separation of concerns.
### Details:
Identify stateful logic, side effects, and complex calculations that appear in multiple components. Extract these into custom hooks following a consistent naming pattern. Create tests for each hook to ensure they work correctly in isolation. Document each hook's purpose, parameters, return values, and usage examples.

## 5. Utility Function Creation [pending]
### Dependencies: 10.1
### Description: Create a library of pure utility functions for common operations currently embedded in components.
### Details:
Extract pure functions that handle data transformation, formatting, validation, and other stateless operations. Organize utilities by domain or function type. Ensure each utility is well-tested, properly typed, and documented. Create a central index for easy importing across the application.

## 6. Business Logic Separation [pending]
### Dependencies: 10.1, 10.3, 10.4, 10.5
### Description: Separate business logic from presentation components and organize it according to domain concepts.
### Details:
Identify business logic (data processing, validation rules, workflow management) currently mixed with UI components. Extract this logic into appropriate services, hooks, or context providers. Establish patterns for how UI components should interact with business logic. Update components to use the newly separated business logic.

## 7. Migration Planning and Execution [pending]
### Dependencies: 10.2, 10.3, 10.4, 10.5, 10.6
### Description: Create and execute a phased migration plan to move from the current structure to the new component hierarchy with minimal disruption.
### Details:
Develop a step-by-step migration strategy that allows for incremental changes. Prioritize components based on complexity, dependencies, and impact. Create a testing strategy for each migration phase. Document the migration process for the team and establish checkpoints to evaluate progress. Execute the migration in planned phases with thorough testing at each step.

