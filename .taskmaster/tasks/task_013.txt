# Task ID: 13
# Title: Set Up Testing Framework
# Status: pending
# Dependencies: 12
# Priority: medium
# Description: Implement a comprehensive testing framework with component tests, integration tests, and proper mocking for external dependencies.
# Details:
1. Set up Jest and React Testing Library
2. Create test utilities for common operations
3. Implement snapshot testing for UI components
4. Set up mocking for external dependencies
5. Create integration tests for critical flows
6. Implement test coverage reporting
7. Add performance regression testing

Example implementation:
```bash
# Install testing dependencies
npm install --save-dev jest @testing-library/react @testing-library/jest-dom @testing-library/user-event jest-environment-jsdom
```

```typescript
// jest.config.js
const nextJest = require('next/jest');

const createJestConfig = nextJest({
  // Provide the path to your Next.js app to load next.config.js and .env files in your test environment
  dir: './',
});

// Add any custom config to be passed to Jest
const customJestConfig = {
  setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
  moduleNameMapper: {
    // Handle module aliases (this will be automatically configured for you soon)
    '^@/components/(.*)$': '<rootDir>/src/components/$1',
    '^@/pages/(.*)$': '<rootDir>/src/pages/$1',
    '^@/hooks/(.*)$': '<rootDir>/src/hooks/$1',
    '^@/lib/(.*)$': '<rootDir>/src/lib/$1',
    '^@/types/(.*)$': '<rootDir>/src/types/$1',
  },
  testEnvironment: 'jest-environment-jsdom',
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{js,jsx,ts,tsx}',
    '!src/pages/_app.tsx',
    '!src/pages/_document.tsx',
  ],
  coverageThreshold: {
    global: {
      statements: 70,
      branches: 70,
      functions: 70,
      lines: 70,
    },
  },
};

// createJestConfig is exported this way to ensure that next/jest can load the Next.js config which is async
module.exports = createJestConfig(customJestConfig);

// jest.setup.js
import '@testing-library/jest-dom';

// src/test/test-utils.tsx
import { render, RenderOptions } from '@testing-library/react';
import { ReactElement, ReactNode } from 'react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ParlayProvider } from '@/contexts/ParlayContext';

const createTestQueryClient = () =>
  new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
      },
    },
    logger: {
      log: console.log,
      warn: console.warn,
      error: () => {},
    },
  });

interface CustomRenderOptions extends Omit<RenderOptions, 'wrapper'> {
  withReactQuery?: boolean;
  withParlayContext?: boolean;
}

function customRender(
  ui: ReactElement,
  {
    withReactQuery = true,
    withParlayContext = true,
    ...renderOptions
  }: CustomRenderOptions = {}
) {
  const Wrapper = ({ children }: { children: ReactNode }) => {
    let wrappedChildren = children;
    
    if (withReactQuery) {
      const testQueryClient = createTestQueryClient();
      wrappedChildren = (
        <QueryClientProvider client={testQueryClient}>
          {wrappedChildren}
        </QueryClientProvider>
      );
    }
    
    if (withParlayContext) {
      wrappedChildren = (
        <ParlayProvider>
          {wrappedChildren}
        </ParlayProvider>
      );
    }
    
    return <>{wrappedChildren}</>;
  };
  
  return render(ui, { wrapper: Wrapper, ...renderOptions });
}

// Re-export everything from testing-library
export * from '@testing-library/react';

// Override render method
export { customRender as render };

// src/components/MatchupCard.test.tsx
import { render, screen, fireEvent } from '@/test/test-utils';
import { MatchupCard } from '@/components/golf/MatchupCard';

const mockTwoBallMatchup = {
  id: 1,
  tournamentId: 'tournament-1',
  round: 1,
  type: '2ball' as const,
  isSettled: false,
  player1: {
    id: 'player-1',
    name: 'Tiger Woods',
    odds: -110,
  },
  player2: {
    id: 'player-2',
    name: 'Phil Mickelson',
    odds: -110,
  },
};

describe('MatchupCard', () => {
  it('renders matchup information correctly', () => {
    render(<MatchupCard matchup={mockTwoBallMatchup} />);
    
    expect(screen.getByText('Tiger Woods')).toBeInTheDocument();
    expect(screen.getByText('Phil Mickelson')).toBeInTheDocument();
    expect(screen.getByText('-110')).toBeInTheDocument();
  });
  
  it('calls onSelect when a player is selected', () => {
    const handleSelect = jest.fn();
    render(
      <MatchupCard 
        matchup={mockTwoBallMatchup} 
        onSelect={handleSelect} 
      />
    );
    
    fireEvent.click(screen.getByText('Tiger Woods'));
    expect(handleSelect).toHaveBeenCalledWith(1, 'player-1');
  });
  
  it('shows selected state for the selected player', () => {
    render(
      <MatchupCard 
        matchup={mockTwoBallMatchup} 
        selectedPlayerId="player-1" 
      />
    );
    
    const tigerElement = screen.getByText('Tiger Woods').closest('div');
    expect(tigerElement).toHaveClass('selected');
    
    const philElement = screen.getByText('Phil Mickelson').closest('div');
    expect(philElement).not.toHaveClass('selected');
  });
  
  it('disables selection when disabled prop is true', () => {
    const handleSelect = jest.fn();
    render(
      <MatchupCard 
        matchup={mockTwoBallMatchup} 
        onSelect={handleSelect} 
        disabled 
      />
    );
    
    fireEvent.click(screen.getByText('Tiger Woods'));
    expect(handleSelect).not.toHaveBeenCalled();
  });
});
```

# Test Strategy:
1. Create unit tests for all components and hooks
2. Test React Query hooks with mock API responses
3. Create integration tests for critical user flows
4. Test error handling and edge cases
5. Verify that test coverage meets the defined thresholds
6. Create visual regression tests for UI components
7. Test performance with simulated slow connections
8. Verify that mocks correctly simulate external dependencies

# Subtasks:
## 1. Configure Jest for the project [pending]
### Dependencies: None
### Description: Set up Jest as the primary testing framework with appropriate configuration for the project environment
### Details:
Install Jest and related dependencies, create jest.config.js with proper settings for module resolution, test environment, and timeouts. Configure Jest to work with the project's build system and file structure. Set up test file naming conventions and patterns.

## 2. Integrate React Testing Library [pending]
### Dependencies: 13.1
### Description: Set up React Testing Library to enable component testing with best practices
### Details:
Install React Testing Library and related utilities. Configure custom render methods that include providers (Redux, Theme, Router, etc.) to simplify test setup. Create a setup file that extends Jest's expect with React Testing Library's custom matchers.

## 3. Create test utilities and helpers [pending]
### Dependencies: 13.2
### Description: Develop reusable test utilities to simplify test writing and maintenance
### Details:
Create helper functions for common testing patterns like form interactions, authentication, and data generation. Implement test data factories to generate consistent test data. Build custom matchers for project-specific assertions. Document usage patterns for the team.

## 4. Implement mock services and API [pending]
### Dependencies: 13.1
### Description: Create a mocking system for external dependencies and API calls
### Details:
Set up MSW (Mock Service Worker) or similar tool to intercept and mock API requests. Create mock implementations for external services and third-party libraries. Develop a system for managing mock data that can be reused across tests. Configure mock persistence and reset between tests.

## 5. Design integration test strategy [pending]
### Dependencies: 13.2, 13.3, 13.4
### Description: Create a framework for integration tests that verify component interactions
### Details:
Define integration test boundaries and scope. Create templates for different types of integration tests (page tests, feature tests, workflow tests). Implement strategies for handling asynchronous operations and state changes in integration tests. Document best practices for writing maintainable integration tests.

## 6. Configure test coverage reporting [pending]
### Dependencies: 13.1
### Description: Set up code coverage analysis and reporting
### Details:
Configure Jest to collect coverage information. Set up reporting formats (HTML, JSON, lcov). Define coverage thresholds for different parts of the codebase. Create scripts to generate and view coverage reports. Integrate with code editors for inline coverage visualization if applicable.

## 7. Integrate testing with CI pipeline [pending]
### Dependencies: 13.1, 13.6
### Description: Configure continuous integration to run tests automatically
### Details:
Set up test execution in the CI environment (GitHub Actions, CircleCI, etc.). Configure test parallelization for faster execution. Set up artifact storage for test results and coverage reports. Implement failure notifications and reporting. Configure test caching strategies to improve CI performance.

