# Task ID: 14
# Title: Create Comprehensive Documentation
# Status: pending
# Dependencies: 10, 12
# Priority: low
# Description: Develop comprehensive documentation for the codebase, including API documentation, component usage, and architecture overview.
# Details:
1. Add JSDoc comments to all functions/components
2. Document complex business logic
3. Create API documentation
4. Set up Storybook for visual component documentation
5. Add usage examples for all components
6. Document component props and behavior
7. Update README with setup instructions
8. Create architecture documentation

Example implementation:
```bash
# Install Storybook
npx storybook init
```

```typescript
// src/components/ui/Button.tsx
/**
 * Button component that supports various styles and sizes.
 * 
 * @example
 * ```tsx
 * <Button variant="primary" size="md" onClick={handleClick}>
 *   Click me
 * </Button>
 * ```
 */
export interface ButtonProps {
  /**
   * The visual style of the button
   * @default "primary"
   */
  variant?: 'primary' | 'secondary' | 'outline' | 'ghost';
  
  /**
   * The size of the button
   * @default "md"
   */
  size?: 'sm' | 'md' | 'lg';
  
  /**
   * Whether the button is disabled
   * @default false
   */
  disabled?: boolean;
  
  /**
   * The content of the button
   */
  children: React.ReactNode;
  
  /**
   * Function called when the button is clicked
   */
  onClick?: () => void;
}

export function Button({
  variant = 'primary',
  size = 'md',
  disabled = false,
  children,
  onClick,
}: ButtonProps) {
  // Component implementation
}

// src/components/ui/Button.stories.tsx
import { Meta, StoryObj } from '@storybook/react';
import { Button } from './Button';

const meta: Meta<typeof Button> = {
  title: 'UI/Button',
  component: Button,
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['primary', 'secondary', 'outline', 'ghost'],
    },
    size: {
      control: 'radio',
      options: ['sm', 'md', 'lg'],
    },
    disabled: {
      control: 'boolean',
    },
    onClick: { action: 'clicked' },
  },
};

export default meta;
type Story = StoryObj<typeof Button>;

export const Primary: Story = {
  args: {
    variant: 'primary',
    children: 'Primary Button',
  },
};

export const Secondary: Story = {
  args: {
    variant: 'secondary',
    children: 'Secondary Button',
  },
};

export const Outline: Story = {
  args: {
    variant: 'outline',
    children: 'Outline Button',
  },
};

export const Small: Story = {
  args: {
    size: 'sm',
    children: 'Small Button',
  },
};

export const Large: Story = {
  args: {
    size: 'lg',
    children: 'Large Button',
  },
};

export const Disabled: Story = {
  args: {
    disabled: true,
    children: 'Disabled Button',
  },
};
```

```markdown
# Golf Parlay Picker

A tool for generating and tracking betting parlays for PGA Tour, European Tour, and opposite-field events.

## Features

- Auto-generates parlays from eligible matchups using predefined logic and filters
- Applies strategy filters to control the nature of recommended picks
- Tracks and auto-settles parlays for performance analysis
- Prevents duplicate golfer selection and ensures logical consistency

## Getting Started

### Prerequisites

- Node.js 16+
- npm or yarn
- Supabase account

### Installation

1. Clone the repository
   ```bash
   git clone https://github.com/yourusername/golf-parlay-picker.git
   cd golf-parlay-picker
   ```

2. Install dependencies
   ```bash
   npm install
   # or
   yarn
   ```

3. Set up environment variables
   ```bash
   cp .env.example .env.local
   # Edit .env.local with your Supabase credentials and other config
   ```

4. Run the development server
   ```bash
   npm run dev
   # or
   yarn dev
   ```

5. Open [http://localhost:3000](http://localhost:3000) in your browser

## Architecture

The application follows a feature-based architecture with the following structure:

- `src/components`: UI components organized by feature and atomic design principles
- `src/hooks`: Custom React hooks for shared logic
- `src/lib`: Utilities, API clients, and shared logic
- `src/pages`: Next.js pages and API routes
- `src/types`: TypeScript type definitions
- `src/contexts`: React context providers

### Data Flow

1. Data is fetched from external sources (PGA Tour, DataGolf API)
2. Processed and stored in Supabase
3. Retrieved via API routes and React Query
4. Displayed and manipulated through the UI

## Testing

Run tests with:

```bash
npm test
# or
yarn test
```

View test coverage with:

```bash
npm test -- --coverage
# or
yarn test --coverage
```

## Storybook

View component documentation with:

```bash
npm run storybook
# or
yarn storybook
```

Then open [http://localhost:6006](http://localhost:6006) in your browser.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.
```

# Test Strategy:
1. Verify that all components have proper JSDoc comments
2. Test Storybook stories for all components
3. Verify that documentation is up-to-date with the codebase
4. Test README instructions by following them on a clean environment
5. Verify that architecture documentation accurately reflects the codebase
6. Test API documentation with example requests
7. Verify that component usage examples work correctly
8. Test documentation for clarity and completeness

# Subtasks:
## 1. Implement JSDoc Comments [pending]
### Dependencies: None
### Description: Add JSDoc comments to all functions, classes, and components in the codebase
### Details:
Follow JSDoc standards to document parameters, return values, types, and descriptions for all code elements. Ensure coverage of utility functions, components, hooks, and services. Include examples where appropriate.

## 2. Create API Documentation [pending]
### Dependencies: None
### Description: Document all API endpoints, request/response formats, and authentication requirements
### Details:
Create comprehensive documentation for each API endpoint including URL, method, required headers, request body format, response format, status codes, and error handling. Organize by resource type and include examples of successful requests and responses.

## 3. Set Up Storybook [pending]
### Dependencies: None
### Description: Install and configure Storybook for component documentation and visual testing
### Details:
Install Storybook dependencies, configure the environment, set up necessary addons (actions, knobs, docs), and create the initial structure. Ensure the setup works with the project's component library and styling system.

## 4. Create Component Usage Examples [pending]
### Dependencies: 14.3
### Description: Develop Storybook stories and usage examples for all components
### Details:
For each component, create multiple stories demonstrating different props, states, and usage scenarios. Include code examples that can be copied. Document component props, events, and accessibility considerations.

## 5. Document Architecture and Update README [pending]
### Dependencies: 14.1, 14.2
### Description: Create architecture documentation and update project README with comprehensive information
### Details:
Document the overall architecture including data flow, state management, folder structure, and design patterns. Update the README with project overview, setup instructions, development workflow, testing approach, deployment process, and links to other documentation resources.

