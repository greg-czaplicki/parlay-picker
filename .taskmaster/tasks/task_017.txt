# Task ID: 17
# Title: Task #17: Refactor Matchup Type Selection to a Single Parent Component
# Status: done
# Dependencies: None
# Priority: high
# Description: Lift the matchup type selection (2-ball/3-ball) state to a parent component and pass it as props to both MatchupsTable and RecommendedPicks components to ensure consistent selection across the dashboard.
# Details:
This task involves refactoring the current implementation where matchup type selection is managed independently in multiple components, causing potential synchronization issues. The implementation should follow these steps:

1. Identify the common parent component for both MatchupsTable and RecommendedPicks.
2. Create state management for matchup type in this parent component.
3. Move the Select dropdown UI from its current location to the parent component.
4. Modify the MatchupsTable component to receive and use the matchup type prop instead of managing it internally.
5. Modify the RecommendedPicks component to receive and use the matchup type prop instead of managing it internally.
6. Ensure that when the matchup type changes in the parent, both child components reflect this change immediately.
7. Update any relevant event handlers to propagate changes back to the parent.
8. Remove any now-redundant state management code from the child components.
9. Ensure proper TypeScript typing for the new props.
10. Update any relevant tests to reflect the new component structure.

This refactoring follows the React principle of "lifting state up" to ensure a single source of truth for data that affects multiple components. The matchup type selection is critical as it determines what data is displayed in both the MatchupsTable and RecommendedPicks, so keeping these in sync is essential for a consistent user experience.

# Test Strategy:
To verify this task has been completed successfully:

1. Unit Tests:
   - Write unit tests for the parent component to verify it correctly manages the matchup type state
   - Update existing unit tests for MatchupsTable and RecommendedPicks to verify they correctly use the provided props
   - Test that changing the matchup type in the parent correctly updates both child components

2. Integration Tests:
   - Create integration tests that simulate user interaction with the Select dropdown
   - Verify that changing the selection updates both components simultaneously
   - Test edge cases like initial loading and default selection

3. Manual Testing:
   - Verify the UI renders correctly with the Select dropdown in its new location
   - Test switching between 2-ball and 3-ball options and confirm both components update accordingly
   - Check that no console errors appear during state changes
   - Verify that the user experience remains intuitive with the new component structure
   - Test on different screen sizes to ensure responsive design is maintained

4. Regression Testing:
   - Ensure all existing dashboard functionality continues to work
   - Verify that data loading and filtering still function correctly in both components
   - Check that any other components that might depend on matchup type selection still work properly

5. Code Review:
   - Confirm that redundant state management code has been removed from child components
   - Verify proper prop typing and prop validation
   - Ensure the refactored code follows project coding standards and patterns

# Subtasks:
## 1. Identify parent component and implement matchup type state [done]
### Dependencies: None
### Description: Identify the common parent component for MatchupsTable and RecommendedPicks, then implement state management for the matchup type selection in this component.
### Details:
1. Determine if Dashboard or another component is the appropriate common parent for both MatchupsTable and RecommendedPicks components.
2. Add state management in the parent using useState: `const [matchupType, setMatchupType] = useState<'2-ball' | '3-ball'>('2-ball')`.
3. Create a handler function `handleMatchupTypeChange` that updates this state.
4. Create TypeScript interfaces for the new props that will be passed to child components.

## 2. Move Select dropdown UI to parent component [done]
### Dependencies: 17.1
### Description: Move the matchup type selection dropdown from its current location to the identified parent component.
### Details:
1. Copy the existing Select dropdown UI code from its current location.
2. Integrate it into the parent component's render method.
3. Connect the dropdown to the state created in the previous subtask using the value and onChange props.
4. Style the dropdown appropriately in its new location.
5. Remove the dropdown from its original location (but don't modify child component logic yet).

## 3. Modify MatchupsTable to use matchup type prop [done]
### Dependencies: 17.1, 17.2
### Description: Update the MatchupsTable component to receive and use the matchup type as a prop instead of managing it internally.
### Details:
1. Update the MatchupsTable component's props interface to include `matchupType: '2-ball' | '3-ball'`.
2. Pass the matchup type state from the parent component to MatchupsTable.
3. Remove the internal state management for matchup type in MatchupsTable.
4. Modify any methods that previously used the internal state to now use the prop.
5. Remove any now-redundant UI elements for matchup type selection in this component.

## 4. Modify RecommendedPicks to use matchup type prop [done]
### Dependencies: 17.1, 17.2
### Description: Update the RecommendedPicks component to receive and use the matchup type as a prop instead of managing it internally.
### Details:
1. Update the RecommendedPicks component's props interface to include `matchupType: '2-ball' | '3-ball'`.
2. Pass the matchup type state from the parent component to RecommendedPicks.
3. Remove the internal state management for matchup type in RecommendedPicks.
4. Modify any methods that previously used the internal state to now use the prop.
5. Remove any now-redundant UI elements for matchup type selection in this component.

## 5. Test synchronization and update relevant tests [done]
### Dependencies: 17.3, 17.4
### Description: Ensure both components update in sync when the matchup type changes and update any relevant tests to reflect the new component structure.
### Details:
1. Manually test the application to verify that changing the matchup type in the parent dropdown updates both MatchupsTable and RecommendedPicks simultaneously.
2. Update existing unit tests for both components to account for the new props-based approach.
3. Add tests for the parent component to verify it correctly manages and passes the matchup type state.
4. Create integration tests to verify the synchronization between components.
5. Check for any edge cases or race conditions that might occur during state updates.

