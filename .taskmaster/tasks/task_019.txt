# Task ID: 19
# Title: Task #19: Implement React Query for All Dashboard Components Data Fetching
# Status: done
# Dependencies: None
# Priority: medium
# Description: Refactor all Dashboard and related client components to use React Query for data fetching instead of direct Supabase or fetch calls, ensuring consistent data management with proper caching, error handling, and loading states.
# Details:
This task involves a comprehensive refactoring of the data fetching approach across all Dashboard components:

1. Identify all components currently using direct Supabase calls or fetch within useEffect hooks (prioritize these first)
2. Create custom React Query hooks for each data fetching operation:
   - Place hooks in a dedicated `/hooks` directory with a consistent naming pattern (e.g., `use[Resource]Query`)
   - Implement proper query keys that reflect the data dependencies
   - Set up appropriate caching strategies based on data update frequency
   - Handle error states with consistent error boundaries or fallbacks
   - Implement loading states with skeletons or loading indicators
   - Add retry logic where appropriate

3. Refactor components to use the new hooks:
   - Remove all direct Supabase or fetch calls from component bodies
   - Replace useEffect data fetching with React Query hooks
   - Update component logic to handle the query states (isLoading, isError, data)
   - Ensure proper data typing throughout the refactored code

4. Implement optimistic updates where applicable for improved UX
5. Set up proper query invalidation strategies for data that needs to stay fresh
6. Update any related context providers that might be managing fetched data
7. Ensure proper cleanup of subscriptions and query cancellations

Technical considerations:
- Use React Query's built-in devtools during development for debugging
- Consider implementing a QueryClientProvider at the app root if not already present
- Standardize error handling across all query hooks
- Ensure backward compatibility with any components that consume the data
- Follow the established pattern from Task #16, but extend to all remaining components

# Test Strategy:
Testing should be comprehensive to ensure the refactoring doesn't introduce regressions:

1. Unit Tests:
   - Test each custom React Query hook in isolation
   - Verify proper query key construction
   - Mock the API responses and test success, error, and loading states
   - Ensure proper cache invalidation works as expected
   - Test retry logic and error handling

2. Component Tests:
   - Verify components correctly consume the query hooks
   - Test that loading states render appropriate UI elements
   - Ensure error states display proper error messages
   - Confirm data is correctly displayed when available
   - Test that components no longer contain direct API calls

3. Integration Tests:
   - Test the interaction between multiple components using the refactored hooks
   - Verify data consistency across the dashboard
   - Test navigation between components and ensure data persistence works as expected
   - Verify optimistic updates work correctly in the UI

4. Manual Testing:
   - Use React Query devtools to inspect query behavior
   - Verify network requests are properly batched and cached
   - Test with throttled network to ensure loading states work correctly
   - Verify error handling with forced API failures

5. Performance Testing:
   - Compare before/after metrics for component render times
   - Measure network request reduction due to caching
   - Verify reduced memory usage from proper cleanup

6. Documentation Verification:
   - Ensure all new hooks are properly documented
   - Verify component documentation is updated to reflect new data fetching approach
   - Check that any API documentation is updated if endpoints were modified

# Subtasks:
## 1. Implement React Query for dashboard.tsx and dashboard-debug.tsx [done]
### Dependencies: None
### Description: Refactor the main dashboard.tsx and dashboard-debug.tsx components to use React Query for data fetching instead of direct Supabase or fetch calls.
### Details:
1. Create custom hooks in `/hooks` directory for all data fetching operations in dashboard.tsx and dashboard-debug.tsx (e.g., `useDashboardDataQuery`)
2. Implement proper query keys that reflect data dependencies
3. Set up appropriate caching strategies based on data update frequency
4. Replace all useEffect data fetching with the new React Query hooks
5. Update component logic to handle query states (isLoading, isError, data)
6. Implement loading skeletons and error fallbacks
7. Ensure proper data typing throughout the refactored code

## 2. Implement React Query for parlay-card.tsx and parlay-summary.tsx [done]
### Dependencies: 19.1
### Description: Refactor the parlay-card.tsx and parlay-summary.tsx components to use React Query for data fetching, ensuring consistent data management with proper caching and loading states.
### Details:
1. Create custom hooks for parlay data fetching operations (e.g., `useParlayDataQuery`, `useParlayDetailsQuery`)
2. Implement query keys that include any relevant parameters (parlayId, userId, etc.)
3. Set up optimistic updates for parlay modifications
4. Replace direct Supabase calls with React Query hooks
5. Implement proper query invalidation strategies
6. Update UI to handle loading and error states
7. Ensure data consistency between parlay-card and parlay-summary components

## 3. Implement React Query for top-navigation.tsx [done]
### Dependencies: 19.1
### Description: Refactor the top-navigation.tsx component to use React Query for any data fetching operations, such as user data, notifications, or navigation-related data.
### Details:
1. Identify all data fetching operations in top-navigation.tsx
2. Create appropriate hooks (e.g., `useUserDataQuery`, `useNotificationsQuery`)
3. Implement stale-while-revalidate caching strategy for frequently changing data
4. Replace direct API calls with React Query hooks
5. Update the component to handle loading and error states appropriately
6. Ensure proper cleanup of subscriptions
7. Implement background refetching for real-time data if needed

## 4. Implement React Query for matchups-table.tsx and direct-player-table.tsx [done]
### Dependencies: 19.1
### Description: Refactor the matchups-table.tsx and direct-player-table.tsx components to use React Query for fetching matchup and player data.
### Details:
1. Create custom hooks for matchup and player data (e.g., `useMatchupsQuery`, `usePlayersQuery`)
2. Implement query keys that include filters, sorting, and pagination parameters
3. Set up appropriate caching with consideration for data freshness requirements
4. Replace direct API calls with React Query hooks
5. Implement infinite loading or pagination with React Query if applicable
6. Update UI components to handle loading, error, and empty states
7. Add retry logic for network failures

## 5. Implement React Query for top-golfers-list.tsx and stat-cell.tsx [done]
### Dependencies: 19.1, 19.4
### Description: Refactor the top-golfers-list.tsx component and tables/player-table/stat-cell.tsx to use React Query for fetching golfer statistics and other related data.
### Details:
1. Create custom hooks for golfer statistics and related data (e.g., `useGolferStatsQuery`, `useStatDetailsQuery`)
2. Implement query keys that properly reflect data dependencies and parameters
3. Set up appropriate caching strategies based on data update patterns
4. Replace direct API calls with React Query hooks
5. Update components to handle loading and error states
6. Implement data prefetching for anticipated user interactions
7. Ensure proper data typing and consistency across components
8. Set up query invalidation for related data

