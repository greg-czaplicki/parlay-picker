# Task ID: 39
# Title: Implement Course DNA-Powered Recommendation System
# Status: pending
# Dependencies: 32, 33, 35, 36, 38
# Priority: high
# Description: Create a recommendation system that leverages Course DNA analysis to generate smart parlay picks based on player-course fit scores, with integrated visualization and API endpoints.
# Details:
This task involves building a comprehensive Course DNA-powered recommendation system with the following components:

1. **Backend API Development**:
   - Create new API endpoints for Course DNA-based recommendations
   - Implement logic to analyze course characteristics (55% approach, 28% around green, 17% off tee, 0% putting for U.S. Open)
   - Build player-course fit calculation algorithm that generates fit scores (like Scottie's 74/100 B grade)
   - Develop recommendation ranking system based on fit scores
   - Integrate with existing matchup/parlay system

2. **Data Integration**:
   - Connect to the validated Course DNA analysis data
   - Create data models for storing course profiles and player skill assessments
   - Implement data access layer for efficient querying of course and player data
   - Set up caching mechanisms for performance optimization

3. **Frontend Components**:
   - Build React components to display Course DNA visualization
   - Create interactive UI for viewing player-course fit scores
   - Implement recommendation display with sorting and filtering options
   - Design intuitive interfaces for users to understand why certain players are recommended
   - Add visual indicators for fit grades (A, B, C, etc.)

4. **Integration with Existing Systems**:
   - Connect to the existing matchup/parlay system
   - Implement hooks to surface recommended picks within the betting interface
   - Ensure proper data flow between Course DNA analysis and recommendation display
   - Add toggles for users to enable/disable Course DNA recommendations

5. **Performance Considerations**:
   - Optimize database queries for course and player data
   - Implement efficient algorithms for calculating fit scores
   - Use memoization for expensive calculations
   - Consider pre-computing recommendations for popular tournaments

Example implementation for the fit score calculation:
```typescript
// src/lib/courseDNA/fitCalculation.ts
export interface PlayerSkills {
  approachSGAvg: number;
  aroundGreenSGAvg: number;
  offTeeSGAvg: number;
  puttingSGAvg: number;
}

export interface CourseDNA {
  approachImportance: number;
  aroundGreenImportance: number;
  offTeeImportance: number;
  puttingImportance: number;
}

export function calculatePlayerFitScore(player: PlayerSkills, course: CourseDNA): {
  score: number;
  grade: string;
} {
  // Normalize player skills to 0-100 scale
  const normalizedSkills = normalizePlayerSkills(player);
  
  // Calculate weighted score based on course DNA
  const weightedScore = 
    normalizedSkills.approachSGAvg * course.approachImportance +
    normalizedSkills.aroundGreenSGAvg * course.aroundGreenImportance +
    normalizedSkills.offTeeSGAvg * course.offTeeImportance +
    normalizedSkills.puttingSGAvg * course.puttingImportance;
  
  // Convert to 0-100 scale
  const score = Math.round(weightedScore);
  
  // Determine grade
  const grade = scoreToGrade(score);
  
  return { score, grade };
}

function scoreToGrade(score: number): string {
  if (score >= 90) return 'A+';
  if (score >= 80) return 'A';
  if (score >= 75) return 'A-';
  if (score >= 70) return 'B+';
  if (score >= 65) return 'B';
  // ... and so on
}
```

Example React component for displaying recommendations:
```tsx
// src/components/CourseDNARecommendations.tsx
import React from 'react';
import { CourseDNAVisualization } from './CourseDNAVisualization';
import { PlayerFitCard } from './PlayerFitCard';
import { useCourseDNARecommendations } from '../hooks/useCourseDNARecommendations';

interface CourseDNARecommendationsProps {
  tournamentId: string;
  maxRecommendations?: number;
}

export const CourseDNARecommendations: React.FC<CourseDNARecommendationsProps> = ({
  tournamentId,
  maxRecommendations = 5
}) => {
  const { recommendations, courseDNA, isLoading, error } = useCourseDNARecommendations(tournamentId);
  
  if (isLoading) return <div>Loading recommendations...</div>;
  if (error) return <div>Error loading recommendations: {error.message}</div>;
  
  return (
    <div className="course-dna-recommendations">
      <h2>Course DNA Recommendations</h2>
      
      <div className="course-profile">
        <h3>Course Profile</h3>
        <CourseDNAVisualization data={courseDNA} />
        <div className="course-breakdown">
          <div>Approach: {courseDNA.approachImportance * 100}%</div>
          <div>Around Green: {courseDNA.aroundGreenImportance * 100}%</div>
          <div>Off Tee: {courseDNA.offTeeImportance * 100}%</div>
          <div>Putting: {courseDNA.puttingImportance * 100}%</div>
        </div>
      </div>
      
      <div className="top-recommendations">
        <h3>Top Player Fits</h3>
        {recommendations.slice(0, maxRecommendations).map(player => (
          <PlayerFitCard 
            key={player.id}
            player={player}
            fitScore={player.fitScore}
            fitGrade={player.fitGrade}
            skillBreakdown={player.skillBreakdown}
          />
        ))}
      </div>
      
      <button className="add-to-parlay-btn">Add Top Picks to Parlay</button>
    </div>
  );
};
```

# Test Strategy:
To verify the correct implementation of the Course DNA-powered recommendation system, follow these testing steps:

1. **Unit Testing**:
   - Test the player-course fit calculation algorithm with various player profiles and course DNA configurations
   - Verify that fit scores are calculated correctly based on the specified weights (55% approach, 28% around green, 17% off tee, 0% putting for U.S. Open)
   - Test grade assignment logic to ensure scores map to the correct letter grades
   - Validate that the recommendation ranking system properly sorts players based on fit scores

2. **API Endpoint Testing**:
   - Create automated tests for all new API endpoints
   - Test with various tournament IDs to ensure correct course DNA data is retrieved
   - Verify error handling for invalid inputs or missing data
   - Test performance with large datasets to ensure acceptable response times
   - Validate that the API correctly integrates with the existing matchup/parlay system

3. **Frontend Component Testing**:
   - Create Jest tests for React components to verify rendering logic
   - Use React Testing Library to test user interactions with the recommendation interface
   - Verify that the Course DNA visualization correctly displays the course profile data
   - Test responsive behavior across different screen sizes
   - Ensure accessibility compliance with automated testing tools

4. **Integration Testing**:
   - Test the end-to-end flow from course DNA analysis to recommendation display
   - Verify that recommendations appear correctly in the existing parlay interface
   - Test the addition of recommended players to parlays
   - Validate that changes in course DNA data properly update recommendations

5. **User Acceptance Testing**:
   - Create test scenarios with known course profiles and player skills
   - Validate that the system recommends players whose skills match what the course rewards
   - Compare system recommendations with expert opinions for validation
   - Test with real tournament data to ensure recommendations align with expected outcomes

6. **Data Validation**:
   - Verify that the system correctly uses the validated Course DNA analysis (55% approach, 28% around green, 17% off tee, 0% putting)
   - Test with historical data to ensure recommendations would have been accurate for past tournaments
   - Validate that player fit scores (like Scottie's 74/100 B grade) are reasonable and consistent

7. **Performance Testing**:
   - Measure API response times under various load conditions
   - Test the system's ability to handle concurrent requests
   - Verify that caching mechanisms work correctly for frequently accessed data
   - Ensure the system can handle the expected user load during peak tournament times

8. **Documentation Testing**:
   - Verify that all new components and APIs are properly documented
   - Ensure that the documentation includes examples of how to use the recommendation system
   - Test that the documentation accurately reflects the implemented functionality

# Subtasks:
## 1. Enhance Course DNA API for Player Fit Scores [done]
### Dependencies: None
### Description: Extend the existing Course DNA API to calculate and provide player-course fit scores based on player skills and course characteristics.
### Details:
Implement backend logic to calculate player-course fit scores using the weighted importance of different skills (approach, around green, off tee, putting). Create new API endpoints that return player fit scores and grades (A+, A, B+, etc.) for a given tournament. Implement the calculation algorithm that normalizes player skills and applies course-specific weights. Add caching mechanisms to optimize performance for frequently accessed tournaments. Include detailed fit breakdowns in the response to explain why players received specific scores.
<info added on 2025-06-14T01:45:56.940Z>
The recommendation algorithm will leverage our existing Course DNA analysis that quantifies course-specific skill importance (e.g., U.S. Open: 55% approach, 28% around green, 17% off tee, 0% putting). We'll implement a scoring system that calculates player-course fit scores on a 0-100 scale with corresponding letter grades (A+, A, B+, etc.). For example, Scottie Scheffler receives a 74/100 B grade fit score for the U.S. Open. The data pipeline will connect our existing Course DNA database with player statistics to generate these recommendations efficiently, with proper caching for performance optimization. This system will serve as the foundation for the API endpoints and eventual UI integration in subsequent subtasks.
</info added on 2025-06-14T01:45:56.940Z>
<info added on 2025-06-14T01:47:28.237Z>
Based on our analysis of the existing Course DNA infrastructure, we need to implement several key enhancements to the recommendation system:

1. **Batch Processing Capability**: Extend the CourseDNAService to process multiple players simultaneously rather than the current single-player approach. This will significantly improve efficiency when generating tournament-wide recommendations.

2. **New API Endpoint**: Develop a dedicated `/api/sg-analysis/recommendations` endpoint that will serve tournament-specific player recommendations with fit scores and grades.

3. **Caching Implementation**: Add Redis-based caching for Course DNA profiles to minimize redundant calculations. Cache tournament-specific recommendations with appropriate expiration policies based on data update frequency.

4. **Player Data Pipeline Improvements**: Create an efficient pipeline that:
   - Retrieves all tournament-eligible players from the roster database
   - Fetches corresponding skill ratings from the `player_skill_ratings` table
   - Applies the fit calculation algorithm with course-specific weights
   - Ranks players by fit score for easy consumption by the frontend

These enhancements will transform our single-player analysis capability into a robust, tournament-wide recommendation system that can efficiently serve the application's needs.
</info added on 2025-06-14T01:47:28.237Z>
<info added on 2025-06-14T01:49:44.901Z>
The implementation of Task 39.1 has been successfully completed with all key requirements met. The CourseDNAService now includes batch processing capabilities through the new `analyzeBatchPlayerCourseFit()` method, which efficiently processes multiple players simultaneously with filtering options. The API endpoint `/api/sg-analysis/recommendations` has been deployed with comprehensive parameter support, error handling, and performance monitoring. Testing confirms accurate recommendation generation, with Scottie Scheffler receiving the expected 74/100 B grade fit score for the U.S. Open, and proper course DNA weighting (55% approach, 28% around green, 17% off tee, 0% putting). Performance metrics show response times under 200ms for 10 recommendations, with efficient batch processing eliminating N+1 query problems. The system now provides detailed fit explanations and maintains a scalable architecture ready for tournament-wide analysis.
</info added on 2025-06-14T01:49:44.901Z>
<info added on 2025-06-14T02:18:09.480Z>
**END OF DAY SUMMARY (June 14, 2025)**

Task 39.1 has been successfully completed with excellent results. The enhanced Course DNA API for Player Fit Scores is now fully operational with the `/api/sg-analysis/recommendations` endpoint processing 451 players efficiently (200-300ms response times). Validation testing confirms accurate recommendations with Scottie Scheffler receiving a 74/100 B grade, Rory McIlroy and Justin Thomas both at 66/100 C+. The Course DNA weighting system is functioning correctly with the expected distribution (55% approach, 28% around green, 17% off tee, 0% putting).

**TOMORROW'S PLAN FOR TASK 39.2:**
For the recommendation algorithm and data pipeline enhancement, we'll focus on:
1. Implementing smart parlay suggestions that combine multiple players based on complementary skills
2. Developing confidence scoring and recent form analysis to improve recommendation quality
3. Creating filtering logic to exclude injured players or those with poor recent form
4. Integrating these enhancements with the existing foundation

The system is ready for these improvements with the dev server running on localhost:3000, the Course DNA recommendations API fully operational, and all 451 players loaded in the database with their skill ratings.
</info added on 2025-06-14T02:18:09.480Z>

## 2. Build Recommendation Algorithm and Data Pipeline [pending]
### Dependencies: 39.1
### Description: Develop the core recommendation algorithm that ranks players based on course fit and creates smart parlay suggestions.
### Details:
Create a recommendation engine that processes Course DNA data and player statistics to generate ranked lists of players with the best course fit. Implement filtering logic to exclude injured players or those with poor recent form. Design a data pipeline that regularly updates player skill metrics based on recent performance. Add logic to generate smart parlay suggestions by combining top course fits with favorable matchups. Implement confidence scores for recommendations based on the strength of the course fit and historical performance at similar courses.

## 3. Create React Query Hooks for Recommendation Data [pending]
### Dependencies: 39.1, 39.2
### Description: Develop custom React Query hooks to fetch and manage Course DNA recommendation data in the frontend.
### Details:
Build a useCourseDNARecommendations hook that fetches player-course fit data for a given tournament. Implement proper caching and refetching strategies to minimize API calls. Add error handling and loading states. Create a usePlayerCourseFit hook for detailed information about a specific player's fit at a course. Implement a useRecommendedParlays hook that provides pre-built parlay suggestions based on course fit. Ensure all hooks are properly typed with TypeScript interfaces that match the API response structure.

## 4. Implement Course DNA Visualization and Player Fit UI Components [pending]
### Dependencies: 39.3
### Description: Create React components to visualize Course DNA characteristics and display player fit scores with explanations.
### Details:
Enhance the existing Course DNA visualization component to show the importance breakdown of different skills (approach, around green, off tee, putting). Build a PlayerFitCard component that displays a player's fit score, grade, and skill breakdown. Create a RecommendationExplanation component that visually explains why a player is recommended for a specific course. Implement sorting and filtering controls for the recommendation list. Design visual indicators for fit grades using color coding and icons. Ensure all components are responsive and follow the application's design system.

## 5. Integrate Recommendations into Matchups Page and Parlay Builder [pending]
### Dependencies: 39.3, 39.4
### Description: Integrate Course DNA recommendations into the existing matchups page and parlay builder to surface recommended picks within the betting interface.
### Details:
Add a Course DNA recommendations section to the matchups page that highlights players with the best course fit. Implement visual indicators next to player names in matchups to show their course fit grade. Add a 'Top Course Fits' filter option in the matchups list. Enhance the parlay builder to suggest picks based on course fit scores. Create a toggle in user settings to enable/disable Course DNA recommendations. Add tooltips that explain the recommendation system when users hover over fit indicators. Implement tracking to measure the impact of recommendations on user betting behavior.

